###############################################################
#                          PATHS                              #
###############################################################

# Absolute path of the local copy of clip-int svn 
# (contains portage, portage-overlay, ... subdirectories)
# CLIP_BASE="/home/<user>/clip"
CLIP_BASE="/opt/clip-int"


# Absolute path of the base directory for debian packages.
# Debian packages built with clip-build will be stored in 
# subdirectories of this directory.
# DEBS_BASE="/home/<user>/build/debs"
DEBS_BASE="/opt/build"


# Absolute path of the base directory for gentoo packages
# This will be used when emerging build depends on the build
# host with clip-build (both for finding allready built packages
# and for storing newly built ones).
PKG_DIR="/var/cache/packages"


# Name and e-mail address of the clip-build user (will be used
# automatically in ChangeLog entries and the Maintainer: field 
# of generated debian packages).
# CLIP_BUILDER="John Doe <clipos@ssi.gouv.fr>"


# "Hash" mapping clip-build spec file names (as found between <specname>
# anchors) to subdirectories of ${DEBS_BASE} where debian packages
# built from those spec files should be stored.
CLIP_SPEC_MAP="
	CLIP	=>	clip
	RM	=>	rm
	GTW	=>	gtw
	TINY	=>	tiny
"

# Extra defines to add to the spec file preprocessing.
# Syntax: "<var1>,<var2>=<val2>,...<varN>" will be passed
# to cpp as "-D<var1> -D<var2>=<val2> ... -D<varN>
#CLIP_SPEC_DEFINES="WITH_HERMES"
#CLIP_SPEC_DEFINES="WITH_HERMES,CLIP_KERNEL_4_4"

###############################################################
#                          BUILD                              #
###############################################################

# Options to pass to make when building packages
# Note: -jN means run N jobs in parallel, to optimize build time
# N should be between (p + 1) and (2p - 1) where p is the number
# of CPU cores.
#CLIP_MAKEOPTS="-j13"

# CLIP_ARCH controls target architecture (strongly related to CLIP_CHOST)
#CLIP_ARCH="x86"

# CHOST variable to use when compiling.
# Do not modify unless you *really* know what you're doing...
#CLIP_CHOST="i686-pc-linux-gnu"


###############################################################
#                          VCS                                #
###############################################################

# If set to "yes", clip-build tools will automatically use
# svn commands when possible. USE_GIT must be set to no when USE_SVN is set to
# "yes".
USE_SVN="no"

# If set to "yes", clip-build tools will automatically use
# git commands when possible. USE_SVN must be set to no when USE_GIT is set to
# "yes".
#USE_GIT="yes"

###############################################################
#                          SIGNING                            #
###############################################################

# Path to the developper private key.
# Leave empty if you don't have one.
# DEV_SIGN_KEY="/home/<user>/<keys>/dev.acidpvr"
DEV_SIGN_KEY="/dev.acidpvr"

# Path to the file containing the password for
# the developper private key.
# Modify if needed.
DEV_SIGN_PWD="${DEV_SIGN_KEY}.txt"

# Path to the developper public key.
# Modify if needed.
DEV_SIGN_CERT="${DEV_SIGN_KEY/acidpvr/acidppr}"

# Path to the controller private key.
# Leave empty if you don't have one.
# CTRL_SIGN_KEY="/home/<user>/<keys>/ctrl.acidpvr"
CTRL_SIGN_KEY="/ctrl.acidpvr"

# Path to the file containing the password for
# the controller private key.
# Modify if needed.
CTRL_SIGN_PWD="${CTRL_SIGN_KEY}.txt"

# Path to the controller public key.
# Modify if needed.
CTRL_SIGN_CERT="${CTRL_SIGN_KEY/acidpvr/acidppr}"

# Path to the developper signature verification key
DEV_CHECK_KEY="${KEY_PATH}/clef_verif_dev.bin"

# Path to the developper signature verification key
CTRL_CHECK_KEY="${KEY_PATH}/clef_verif_ctrl.bin"
