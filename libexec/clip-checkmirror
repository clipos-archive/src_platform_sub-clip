#!/usr/bin/env python2
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017-2018 ANSSI. All Rights Reserved.
# Summary: check CLIP mirrors
# Usage: clip-checkmirror [-g] <path>

import deb822
import debian.debfile
import distutils.version
import gzip
import os
import hashlib
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-g', '--gtw', dest='gtw', action='store_true',
		help='the repository is a gateway repository')
parser.add_argument('basedir', default='./', nargs='?',
		help='the path to the repository')

args = parser.parse_args()


def check_deps(repo):
	def present(package, repository, dependee):
		if package['name'] in repository['pkgs'].keys() or \
           package['name'] in repository['provides'].keys():
			try:
				provided=repository['pkgs'][package['name']]
			except:
				provided=repository['provides'][package['name']]
			if provided == dependee:
				return False
			if package['version'] is None:
				return True
			else:
				op, ver = package['version']
				ver_dep = distutils.version.LooseVersion(ver)
				ver_prov= distutils.version.LooseVersion(provided['Version'])
				if op == u'<<':
					return ver_dep > ver_prov
				elif op == u'<=':
					return ver_dep >= ver_prov
				elif op == u'=':
					return ver == provided['Version']
				elif op == u'>=':
					return ver_dep <= ver_prov
				elif op == u'>>':
					return ver_dep < ver_prov
				else:
					print op
					raise Exception
		else:
			return False

	def not_present(package, repository, dependee):
		return not present(package, repository, dependee)

	status=True
	for pkg in repo['pkgs'].itervalues(): # Each package
		pkg_status=True
		for deps in pkg.relations.iteritems() : # Each relation item
			if deps[0] in ['conflicts', 'breaks']:
				check=not_present
			elif deps[0] in ['pre-depends', 'recommends', 'suggests', 'depends']:
				check=present
			else:
				continue
			dep_status=True
			for elem in deps[1]: # Comma separated list (AND list)
				elem_status=False
				errormsg=""
				for subelem in elem: # Pipe separated list (OR list)
					val = check(subelem, repo, pkg)
					elem_status |= val
					if not val:
						errormsg+=', %s' % subelem['name']
						if subelem['version'] is not None:
							errormsg+=' (%s %s)' % (subelem['version'][0], subelem['version'][1])
				dep_status &= elem_status
				if not elem_status:
					print "Package %s does not satisfy '%s' dependencies : %s" % \
							(pkg['Package'], deps[0], errormsg[2:])
			pkg_status &= dep_status
		status &= pkg_status
	return status


def check_files(repo, basedir):
	status = True
	for pkg in repo.keys():
		try:
			with open(os.path.join(basedir,repo[pkg]['Filename']), 'r') as deb:
					text = deb.read()
					try:
						if hashlib.md5(text).hexdigest() != repo[pkg]['MD5sum'] or \
						   hashlib.sha1(text).hexdigest() != repo[pkg]['SHA1']:
								print "file %s is corrupted" % repo[pkg]['Filename']
								status &= False
						if hashlib.sha256(text).hexdigest() != repo[pkg]['SHA256']:
								print "file %s is corrupted" % repo[pkg]['Filename']
								status &= False
						if hashlib.sha512(text).hexdigest() != repo[pkg]['SHA512']:
								print "file %s is corrupted" % repo[pkg]['Filename']
								status &= False
					except:
						pass
					deb.seek(0)
					files = debian.debfile.ArFile(fileobj=deb).getnames()
					if not ('dev_sign       \x00' in files and 'ctrl_sign      \x00' in files):
						status &=False
						print "file %s is not properly signed" % repo[pkg]['Filename']
		except IOError:
			print "could not open %s" % repo[pkg]['Filename']
			status &= False
	return status

status=True

def check_versions(repoAd, repoBd):
	status=True
	repoA = set(repoAd)
	repoB = set(repoBd)
	for pkg in repoA.intersection(repoB):
		if repoAd[pkg]['Version']!=repoBd[pkg]['Version']:
			print "%s is provided in two differents versions between repositories" % pkg
			status = False
	return status

def populate_dict(path, dest):
	dest['pkgs']={}
	dest['provides']={}
	with gzip.GzipFile(path) as f:
		for pkg in deb822.Packages.iter_paragraphs(f):
			dest['pkgs'][pkg['Package']]=pkg
			for elem in pkg.relations['provides']:
				for subelem in elem:
					dest['provides'][subelem['name']]=pkg

clip_core={}
populate_dict(os.path.join(args.basedir,
	'clip/clip-core-conf/dists/clip/main/binary-i386/Packages.gz'), clip_core)
print "=================== Clip Core ==================="
status&=check_files(clip_core['pkgs'], os.path.join(args.basedir, 'clip/clip-core-conf/'))
status&=check_deps(clip_core)

clip_apps={}
populate_dict(os.path.join(args.basedir,
	'clip/clip-apps-conf/dists/clip/main/binary-i386/Packages.gz'), clip_apps)
print "=================== Clip Apps ==================="
status&=check_files(clip_apps['pkgs'], os.path.join(args.basedir, 'clip/clip-apps-conf/'))
status&=check_deps(clip_apps)

if not args.gtw:
	rm_core={}
	populate_dict(os.path.join(args.basedir,
		'rm/rm-core-conf/dists/rm/main/binary-i386/Packages.gz'), rm_core)
	print "=================== RM Core ==================="
	status&=check_files(rm_core['pkgs'], os.path.join(args.basedir, 'rm/rm-core-conf/'))
	status&=check_deps(rm_core)

	rm_apps={}
	populate_dict(os.path.join(args.basedir,
		'rm/rm-apps-conf/dists/rm/main/binary-i386/Packages.gz'), rm_apps)
	print "=================== RM Apps ==================="
	status&=check_files(rm_apps['pkgs'], os.path.join(args.basedir, 'rm/rm-apps-conf/'))
	status&=check_deps(rm_apps)
	
	print "=================== Compare Versions from clip-apps and rm-apps ===================="
	check_versions(clip_apps['pkgs'], rm_apps['pkgs'])
	print "=================== Compare Versions from clip-apps and rm-core ===================="
	check_versions(clip_apps['pkgs'], rm_core['pkgs'])
	print "=================== Compare Versions from clip-core and rm-core ===================="
	check_versions(clip_core['pkgs'], rm_core['pkgs'])
	print "=================== Compare Versions from clip-core and rm-apps ===================="
	check_versions(clip_core['pkgs'], rm_apps['pkgs'])

os._exit(0 if status else 1)
