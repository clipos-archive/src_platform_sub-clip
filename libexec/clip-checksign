#!/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017-2018 ANSSI. All Rights Reserved.
# Usage: clip-checksign <-a|-d|-c>
# Summary: list unsigned packages

#
#  clip-checksign - list unsigned packages.
#  Copyright (C) 2010 ANSSI
#  Author: Vincent Strubel <clipos@ssi.gouv.fr>
#
#  All rights reserved.
#

get_members() {
	local p="${1}"

	local mbrs="$(ar tv "${p}" | awk '{print $8}')"
	if [[ -z "${mbrs}" ]]; then
		echo "${p}: failed to get members" >&2
		return 1
	fi
	echo "${mbrs}"
	return 0
}

check_mbrs() {
	local check="${1}"
	local mbrs="${2}"

	local n="$(echo "${mbrs}" | grep -w "${check}" | wc -l)"

	if [[ ${n} -gt 1 ]]; then
		echo "${p}: too many ${check} members">&2
		return 0
	fi

	[[ ${n} -eq 1 ]] && return 0
	return 1
}

check_debs_dev() {
	for p in *.deb; do
		local mbrs="$(get_members "${p}")"
		check_mbrs "dev_sign" "${mbrs}" || echo "${p}"
	done
}

check_debs_ctrl() {
	for p in *.deb; do
		local mbrs="$(get_members "${p}")"
		check_mbrs "ctrl_sign" "${mbrs}" || echo "${p}"
	done
}

check_debs_all() {
	for p in *.deb; do
		local mbrs="$(get_members "${p}")"
		local nok=""
		check_mbrs "ctrl_sign" "${mbrs}" || nok="ctrl"
		check_mbrs "dev_sign" "${mbrs}" || nok="dev"
		[[ -z "${nok}" ]] || echo "${p}"
	done
}

usage() {
	local progname="$(basename "${0}")"

	cat <<EOF

$progname: list packages in the current directory which are not signed.

Note that this does not verify the signatures themselves, but only checks if 
they are present or not.

Packages that do not include the signature(s) are listed on STDOUT (simple list
of package files, which can be passed to another tool). Other conditions affecting
package signatures, like a double developper signature, are printed on STDERR.

Usage: $progname <action>
  with action one (and only one) of the following:
    -d : only check developper signatures
    -c : only check controller signatures
    -a : check that all signatures are present (developper + controller)

EOF
}

######################### MAIN ################################

if [[ -z "${1}" ]]; then
	usage
	echo "Error: No action specified" >&2
	exit 1
fi

case "${1}" in 
	-a)
		check_debs_all
		;;
	-c)
		check_debs_ctrl
		;;
	-d)
		check_debs_dev
		;;
	-h)
		usage
		exit 0
		;;
	*)
		usage
		echo "Error: Unsupported action: ${1}" >&2
		exit 1
		;;
esac
